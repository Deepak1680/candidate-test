const PORT = 3000;

require("dotenv").config();
const express = require("express");
const session = require("express-session");
const mongoose = require("mongoose");
const ejs = require("ejs");
// const encrypt = require("mongoose-encryption");
// const md5 = require("md5");
// const bcrypt = require("bcrypt");
// const saltRounds = 10;
const passport = require("passport");
const passportLocalMongoose = require("passport-local-mongoose");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
// utility method for ease
const findOrCreate = require("mongoose-findorcreate");

const app = express();



// Add middleware to parse incoming requests
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public"));
app.set("view engine", "ejs");
~~n
// Set up session middleware
app.use(
  session({
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: false,
  })
);

// Initialize Passport.js
app.use(passport.initialize());
app.use(passport.session());

const { Schema, model } = mongoose;

mongoose
  .connect("mongodb://127.0.0.1:27017/secretDB", {
    useNewUrlParser: true,
  })
  .then(() => console.log("Database connected!"))
  .catch((err) => console.log(err));

const userSchema = new Schema({
  email: String,
  password: String,
  googleId: String,
  // secret: String,
});

const secretSchema = new Schema({
  secret: String,
});

const Secret = new model("Secret", secretSchema);

// mongoose-encyption
// userSchema.plugin(encrypt, {
//   secret: process.env.SECRET,
//   encryptedFields: ["password"],
// });

// passport-local-mongoose
userSchema.plugin(passportLocalMongoose);
userSchema.plugin(findOrCreate);

const User = new model("User", userSchema);

// Configure Passport.js local strategy
passport.use(User.createStrategy());

// use static serialize and deserialize of model for passport session support
passport.serializeUser(function (user, done) {
  process.nextTick(function () {
    done(null, user.id);
  });
});

passport.deserializeUser(function (id, done) {
  process.nextTick(async function () {
    try {
      const user = await User.findById(id);
      done(null, user);
    } catch (err) {
      done(err, null);
    }
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: "http://localhost:3000/auth/google/secrets",
    },
    function (accessToken, refreshToken, profile, cb) {
      //   console.log(profile);
      const email = profile.emails[0].value;
      User.findOrCreate(
        { googleId: profile.id, username: email },
        function (err, user) {
          return cb(err, user);
        }
      );
    }
  )
);

app.get("/", (req, res) => {
  res.render("home");
});

app
  .route("/register")
  .get((req, res) => {
    res.render("register");
  })
  //   .post(async (req, res) => {
  //     bcrypt.hash(req.body.password, saltRounds, async function (err, hash) {
  //       const newUser = new User({
  //         email: req.body.username,
  //         password: hash,
  //       });
  //       try {
  //         await newUser.save();
  //         res.render("secrets");
  //       } catch (err) {
  //         console.log(err);
  //       }
  //     });
  //   });
  .post((req, res) => {
    User.register(
      { username: req.body.username },
      req.body.password,
      function (err, user) {
        if (err) {
          console.log(err);
          res.redirect("/register");
        } else {
          passport.authenticate("local")(req, res, function () {
            res.redirect("/secrets");
          });
        }
      }
    );
  });

app
  .route("/login")
  .get((req, res) => {
    res.render("login");
  })
  //   .post(async (req, res) => {
  //     const password = req.body.password;

  //     const foundUser = await User.findOne({ email: req.body.username });
  //     if (foundUser) {
  //       bcrypt.compare(password, foundUser.password, function (err, result) {
  //         if (result === true) {
  //           res.render("secrets");
  //         } else {
  //           res.send("Invalid Password");
  //         }
  //       });
  //     } else {
  //       res.send("Invalid Email");
  //     }
  //   });
  .post((req, res) => {
    const user = new User({
      username: req.body.username,
      password: req.body.password,
    });
    req.login(user, function (err) {
      if (err) {
        console.log(err);
      } else {
        passport.authenticate("local")(req, res, function () {
          res.redirect("/secrets");
        });
      }
    });
  });

// app.get("/secrets", async (req, res) => {
//   try {
//     const foundUsers = await User.find({ secret: { $ne: null } });
//     if (foundUsers) {
//       res.render("secrets", { usersWithSecrets: foundUsers });
//     }
//   } catch (err) {
//     console.log(err);
//   }
// });

app.get("/secrets", async (req, res) => {
  if (req.isAuthenticated()){
    try {
      // Find all secrets that have a non-null "secret" field
      const foundSecrets = await Secret.find({ secret: { $ne: null } });
  
      if (foundSecrets) {
        res.render("secrets", { secrets: foundSecrets });
      }
    } catch (err) {
      console.log(err);
    }
  }
  else{
    res.redirect("/login")
  }
  
});

app.get("/logout", function (req, res) {
  req.logout(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});

app.get("/auth/google", (req, res, next) => {
  //   console.log("in /auth/google");
  passport.authenticate("google", { scope: ["openid", "email", "profile"] })(
    req,
    res,
    next
  );
});

app.get(
  "/auth/google/secrets",
  passport.authenticate("google", { failureRedirect: "/login" }),
  function (req, res) {
    // Successful authentication, redirect to secrets.
    res.redirect("/secrets");
  }
);

app.get("/submit", function (req, res) {
  if (req.isAuthenticated()) {
    res.render("submit");
  } else {
    res.redirect("/login");
  }
});

// app.post("/submit", async function (req, res) {
//   const submittedSecret = req.body.secret;

//   //Once the user is authenticated and their session gets saved, their user details are saved to req.user.
//   // console.log(req.user.id);

//   try {
//     const foundUser = await User.findById(req.user.id);
//     if (foundUser) {
//       foundUser.secret = submittedSecret;
//       await foundUser.save();
//       res.redirect("/secrets");
//     }
//   } catch (err) {
//     console.log(err);
//   }
// });

// according to new secret collection
app.post("/submit", async function (req, res) {
  // Check if the user is authenticated
  if (req.isAuthenticated()) {
    const submittedSecret = req.body.secret;
    if (submittedSecret === "") {
      return res.redirect("/secrets");
    }
    try {
      const newSecret = new Secret({
        secret: submittedSecret,
      });

      // Save the new secret to the database
      await newSecret.save();
      res.redirect("/secrets");
    } catch (err) {
      console.log(err);
    }
  } else {
    res.redirect("/login");
  }
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
~
